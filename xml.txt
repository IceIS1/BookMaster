// The XmlRoot attribute allows you to set an alternate name   
    // (PurchaseOrder) for the XML element and its namespace. By   
    // default, the XmlSerializer uses the class name. The attribute   
    // also allows you to set the XML namespace for the element. Lastly,  
    // the attribute sets the IsNullable property, which specifies whether   
    // the xsi:null attribute appears if the class instance is set to   
    // a null reference.  
    [XmlRoot("PurchaseOrder", Namespace = "http://www.cpandl.com",
    IsNullable = false)]
    public class PurchaseOrder
    {
        public Address ShipTo;
        public string OrderDate;
        // The XmlArray attribute changes the XML element name  
        // from the default of "OrderedItems" to "Items".  
        [XmlArray("Items")]
        public OrderedItem[] OrderedItems;
        public decimal SubTotal;
        public decimal ShipCost;
        public decimal TotalCost;
    }

    public class Address
    {
        // The XmlAttribute attribute instructs the XmlSerializer to serialize the   
        // Name field as an XML attribute instead of an XML element (the   
        // default behavior).  
        [XmlAttribute]
        public string Name;
        public string Line1;

        // Setting the IsNullable property to false instructs the   
        // XmlSerializer that the XML attribute will not appear if   
        // the City field is set to a null reference.  
        [XmlElement(IsNullable = false)]
        public string City;
        public string State;
        public string Zip;
    }

    public class OrderedItem
    {
        public string ItemName;
        public string Description;
        public decimal UnitPrice;
        public int Quantity;
        public decimal LineTotal;

        // Calculate is a custom method that calculates the price per item  
        // and stores the value in a field.  
        public void Calculate()
        {
            LineTotal = UnitPrice * Quantity;
        }
    }




	/* PurchaseOrder po = new PurchaseOrder();

             // Creates an address to ship and bill to.  
             Address billAddress = new Address();
             billAddress.Name = "Teresa Atkinson";
             billAddress.Line1 = "1 Main St.";
             billAddress.City = "AnyTown";
             billAddress.State = "WA";
             billAddress.Zip = "00000";
             // Sets ShipTo and BillTo to the same addressee.  
             po.ShipTo = billAddress;
             po.OrderDate = System.DateTime.Now.ToLongDateString();

             // Creates an OrderedItem.  
             OrderedItem i1 = new OrderedItem();
             i1.ItemName = "Widget S";
             i1.Description = "Small widget";
             i1.UnitPrice = (decimal)5.23;
             i1.Quantity = 3;
             i1.Calculate();

             // Inserts the item into the array.  
             OrderedItem[] items = { i1 };
             po.OrderedItems = items;
             // Calculate the total cost.  
             decimal subTotal = new decimal();
             foreach (OrderedItem oi in items)
             {
                 subTotal += oi.LineTotal;
             }
             po.SubTotal = subTotal;
             po.ShipCost = (decimal)12.51;
             po.TotalCost = po.SubTotal + po.ShipCost;
             // Serializes the purchase order, and closes the TextWriter.  
             serializer.Serialize(writer, po);
             */