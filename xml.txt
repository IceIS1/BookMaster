
// https://codereview.stackexchange.com/questions/36238/proper-and-elegant-way-of-building-a-xml-document



// The XmlRoot attribute allows you to set an alternate name   
    // (PurchaseOrder) for the XML element and its namespace. By   
    // default, the XmlSerializer uses the class name. The attribute   
    // also allows you to set the XML namespace for the element. Lastly,  
    // the attribute sets the IsNullable property, which specifies whether   
    // the xsi:null attribute appears if the class instance is set to   
    // a null reference.  
    [XmlRoot("PurchaseOrder", Namespace = "http://www.cpandl.com",
    IsNullable = false)]
    public class PurchaseOrder
    {
        public Address ShipTo;
        public string OrderDate;
        // The XmlArray attribute changes the XML element name  
        // from the default of "OrderedItems" to "Items".  
        [XmlArray("Items")]
        public OrderedItem[] OrderedItems;
        public decimal SubTotal;
        public decimal ShipCost;
        public decimal TotalCost;
    }

    public class Address
    {
        // The XmlAttribute attribute instructs the XmlSerializer to serialize the   
        // Name field as an XML attribute instead of an XML element (the   
        // default behavior).  
        [XmlAttribute]
        public string Name;
        public string Line1;

        // Setting the IsNullable property to false instructs the   
        // XmlSerializer that the XML attribute will not appear if   
        // the City field is set to a null reference.  
        [XmlElement(IsNullable = false)]
        public string City;
        public string State;
        public string Zip;
    }

    public class OrderedItem
    {
        public string ItemName;
        public string Description;
        public decimal UnitPrice;
        public int Quantity;
        public decimal LineTotal;

        // Calculate is a custom method that calculates the price per item  
        // and stores the value in a field.  
        public void Calculate()
        {
            LineTotal = UnitPrice * Quantity;
        }
    }




	/* PurchaseOrder po = new PurchaseOrder();

             // Creates an address to ship and bill to.  
             Address billAddress = new Address();
             billAddress.Name = "Teresa Atkinson";
             billAddress.Line1 = "1 Main St.";
             billAddress.City = "AnyTown";
             billAddress.State = "WA";
             billAddress.Zip = "00000";
             // Sets ShipTo and BillTo to the same addressee.  
             po.ShipTo = billAddress;
             po.OrderDate = System.DateTime.Now.ToLongDateString();

             // Creates an OrderedItem.  
             OrderedItem i1 = new OrderedItem();
             i1.ItemName = "Widget S";
             i1.Description = "Small widget";
             i1.UnitPrice = (decimal)5.23;
             i1.Quantity = 3;
             i1.Calculate();

             // Inserts the item into the array.  
             OrderedItem[] items = { i1 };
             po.OrderedItems = items;
             // Calculate the total cost.  
             decimal subTotal = new decimal();
             foreach (OrderedItem oi in items)
             {
                 subTotal += oi.LineTotal;
             }
             po.SubTotal = subTotal;
             po.ShipCost = (decimal)12.51;
             po.TotalCost = po.SubTotal + po.ShipCost;
             // Serializes the purchase order, and closes the TextWriter.  
             serializer.Serialize(writer, po);
             */



			  //create new instance of XmlDocument
            /*    XmlDocument doc = new XmlDocument();

                //load from file
                doc.Load(filePath);

                //create node and add value
                XmlNode node = doc.CreateNode(XmlNodeType.Element, "Items", null);
               //    XmlNode node = doc.SelectSingleNode("Items");
               // XmlNodeList node = doc.SelectNodes("/Items/Book");


                //node.InnerText = "this is new node";

                XmlNode subNode = doc.CreateNode(XmlNodeType.Element, "Book", null);

                subNode.InnerText = "this is new node";

                node.AppendChild(subNode);
                //add to elements collection
                 doc.DocumentElement.AppendChild(node);

                //save back
                doc.Save(filePath); */
            /*    XmlDocument doc4 = new XmlDocument();
                doc4.Load(filePath);
                XmlElement XEle =doc4.CreateElement("Items");
                                                                //  XEle.SetAttribute("Book", "Project6");
                                                                //    XEle.SetAttribute("ID", "6");
                doc4.DocumentElement.AppendChild(XEle.Clone());
                doc4.Save(Console.Out);
                Console.WriteLine(); */
            /*   XDocument doc = XDocument.Load(filePath);
               XElement root = new XElement("Book");
               root.Add(new XAttribute("name", "name goes here"));
               root.Add(new XElement("SnippetCode", "SnippetCode"));
               doc.Element("Items").Add(root); */
            /* XDocument doc = XDocument.Load(filePath);
             doc.Root.Add(
                 new XElement("Book",
                     new XAttribute("name", "name goes here"),
                     new XElement("SnippetCode", "SnippetCode"))
             ); */


            /*XDocument doc = XDocument.Load(filePath);
            XElement root = new XElement("Items");
            root.Add(new XAttribute("name", "name goes here"));
            root.Add(new XElement("SnippetCode", "SnippetCode"));
            doc.Root.Add(root); */

            //doc.Element("Items").Add(root);
            // doc.Save(filePath);


            /*  var doc = XDocument.Parse(@"
   <PurchaseOrder xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns='http://www.cpandl.com'>
     <Items>
       <Book>
         <Isbn>12</Isbn>
         <Author>Test</Author>
         <Title>Prufa</Title>
       </Book>
     </Items>
   </PurchaseOrder>");

               var text1 = "Book";
               var text2 = "Lemon";

               // Find the food group element

               var group = doc.Element("Items").Element(text1);

               if (group == null)
               {
                   Console.WriteLine("Group {0} does not exist", text1);
                   return;
               }

               // Check the existing food

               var items = group.Elements();

               if (items.Any(e => e.Value == text2))
               {
                   Console.WriteLine("Food {0} already exists", text2);
                   return;
               }

               // Finally add the food

               group.Add(new XElement(String.Format("ITEM{0}", items.Count() + 1), text2));

               Console.WriteLine(doc); */

            /*    XmlDocument doc = new XmlDocument();
                doc.Load(filePath);

                string group = "Book"; //textbox1.Text
                string item = "KIWI"; //textbox2.Text
                                      //select your specific node ..
                XmlElement el = (XmlElement)doc.SelectSingleNode("/Items/" + group);

                if (el != null)
                {
                    XmlElement elem = doc.CreateElement("ITEM"); //item1 ,item2..
                    elem.InnerText = item;
                    el.AppendChild(elem);
                }

                Console.WriteLine(doc);

                doc.Save(filePath); */